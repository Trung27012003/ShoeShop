// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShoeApp.Data;

#nullable disable

namespace ShoeApp.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20240223152012_mg")]
    partial class mg
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", "security");

                    b.HasData(
                        new
                        {
                            Id = "2FA6148D-B530-421F-878E-CE1D54BFC6AB",
                            ConcurrencyStamp = "9a46bedc-a8bd-45df-8658-3d48e0d20755",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "12e74866-7348-407a-aab7-9a7d7e9b8f0c",
                            ConcurrencyStamp = "12854f84-e570-406a-bc63-3f06e5d48766",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "2FA6148D-B530-421F-878E-CE4D54BFC6AB",
                            ConcurrencyStamp = "78974242-86ed-4b6a-975c-9ad744f141b8",
                            Name = "Guest",
                            NormalizedName = "GUEST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "security");

                    b.HasData(
                        new
                        {
                            UserId = "2FA6148D-B530-421F-878E-CE4D54BFC6AB",
                            RoleId = "2FA6148D-B530-421F-878E-CE4D54BFC6AB"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "security");
                });

            modelBuilder.Entity("ShoeApp.Models.Adress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Ward")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("ShoeApp.Models.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrandName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brand");

                    b.HasData(
                        new
                        {
                            Id = new Guid("76158011-7cbc-422f-b78a-445a4c136a8d"),
                            BrandName = "Brand 1"
                        },
                        new
                        {
                            Id = new Guid("247a50d2-38e5-409b-95eb-fe0dce91e187"),
                            BrandName = "Brand 2"
                        },
                        new
                        {
                            Id = new Guid("9df3fe99-66e8-4f2e-96d3-5aaf3b8bb606"),
                            BrandName = "Brand 3"
                        },
                        new
                        {
                            Id = new Guid("4becf17b-ab5b-439e-852a-452273a911d2"),
                            BrandName = "Brand 4"
                        },
                        new
                        {
                            Id = new Guid("4b6cf35a-1a75-48e7-b99a-7f32feb88179"),
                            BrandName = "Brand 5"
                        });
                });

            modelBuilder.Entity("ShoeApp.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("ShoeApp.Models.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<Guid?>("Product_Detail_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("Product_Detail_ID");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("ShoeApp.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eae54104-9b97-41d9-bd77-1e696b7bb04f"),
                            CategoryName = "Category 1"
                        },
                        new
                        {
                            Id = new Guid("b73cf7b4-ce51-4867-a1eb-9d0db06e4860"),
                            CategoryName = "Category 2"
                        },
                        new
                        {
                            Id = new Guid("a44cfe38-e926-4cb5-96d4-4a39dada18ec"),
                            CategoryName = "Category 3"
                        },
                        new
                        {
                            Id = new Guid("0f5162e2-1b92-47f2-8d39-a5a8212c0d10"),
                            CategoryName = "Category 4"
                        },
                        new
                        {
                            Id = new Guid("3eb872fc-33a2-4690-bd9d-a73ca70a625e"),
                            CategoryName = "Category 5"
                        });
                });

            modelBuilder.Entity("ShoeApp.Models.Color", b =>
                {
                    b.Property<Guid>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ColorId");

                    b.ToTable("Color");

                    b.HasData(
                        new
                        {
                            ColorId = new Guid("5e8591ab-583b-4b18-a7d3-a4e69c20f991"),
                            ColorCode = "#000000",
                            ColorName = "Đen"
                        },
                        new
                        {
                            ColorId = new Guid("b4122bc6-b698-421c-825f-86e5d1e8a499"),
                            ColorCode = "#FFFFFF",
                            ColorName = "Trắng"
                        },
                        new
                        {
                            ColorId = new Guid("5a7aa15d-c6b1-4555-b9bc-972166d33cb9"),
                            ColorCode = "#FF0000",
                            ColorName = "Đỏ"
                        },
                        new
                        {
                            ColorId = new Guid("44be66ce-5941-46d1-9b41-6881031dc13f"),
                            ColorCode = "#00FF00",
                            ColorName = "Xanh lá cây"
                        },
                        new
                        {
                            ColorId = new Guid("af946fe5-1dcc-4ffe-bff9-15ef4c7ab688"),
                            ColorCode = "#0000FF",
                            ColorName = "Xanh dương"
                        },
                        new
                        {
                            ColorId = new Guid("b2be2059-c660-4c57-879c-f5e735b43363"),
                            ColorCode = "#FFFF00",
                            ColorName = "Vàng"
                        },
                        new
                        {
                            ColorId = new Guid("5895fd34-e355-431a-bf76-0c4bfbd1fb00"),
                            ColorCode = "#FFA500",
                            ColorName = "Cam"
                        },
                        new
                        {
                            ColorId = new Guid("5eeda66b-1800-47ba-ba16-8b971d016878"),
                            ColorCode = "#800080",
                            ColorName = "Tím"
                        },
                        new
                        {
                            ColorId = new Guid("6478d564-c435-491b-9d29-8831759079e3"),
                            ColorCode = "#FFC0CB",
                            ColorName = "Hồng"
                        },
                        new
                        {
                            ColorId = new Guid("96ded6f5-7c32-47aa-9ef3-9c850496e358"),
                            ColorCode = "#808080",
                            ColorName = "Xám"
                        },
                        new
                        {
                            ColorId = new Guid("f2bbe183-d412-44e1-9c45-6435097107ff"),
                            ColorCode = "#A52A2A",
                            ColorName = "Nâu"
                        },
                        new
                        {
                            ColorId = new Guid("ce617b4a-8319-473b-8862-e3133dda30af"),
                            ColorCode = "#000080",
                            ColorName = "Xanh lam"
                        },
                        new
                        {
                            ColorId = new Guid("04f85df1-dd7b-4a54-946b-91dc969b9c1b"),
                            ColorCode = "#00BFFF",
                            ColorName = "Xanh da trời"
                        },
                        new
                        {
                            ColorId = new Guid("f2815eb9-8198-452a-bf1c-5b91bb81f0eb"),
                            ColorCode = "#FFDAB9",
                            ColorName = "Hồng phấn"
                        },
                        new
                        {
                            ColorId = new Guid("e7557471-66c5-4e07-9990-3f35926e5ff8"),
                            ColorCode = "#C0C0C0",
                            ColorName = "Xám tro"
                        },
                        new
                        {
                            ColorId = new Guid("126e1410-cf44-4b01-bd44-be2535f7caa7"),
                            ColorCode = "#C0C0C0",
                            ColorName = "Bạc"
                        });
                });

            modelBuilder.Entity("ShoeApp.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Create_Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Delivery_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrderStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Payment_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("RecipientAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Ship_Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ShippingFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalAmout")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalAmoutAfterApplyingVoucher")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("User_Reference_Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("VoucherValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("ShoeApp.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProductDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductDetailId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("ShoeApp.Models.OrderStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrderStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1c54c2dd-2fa5-4041-9b94-fb613bebdfbc"),
                            OrderStatusName = "Đang được xử lý"
                        },
                        new
                        {
                            Id = new Guid("2c54c2dd-2fa5-4041-9b94-fb613bebdfbc"),
                            OrderStatusName = "Chờ lấy hàng"
                        },
                        new
                        {
                            Id = new Guid("9c54c2dd-2fa5-4041-9b94-fb613bebdfbc"),
                            OrderStatusName = "Chờ Thanh toán"
                        },
                        new
                        {
                            Id = new Guid("3c54c2dd-2fa5-4041-9b94-fb613bebdfbc"),
                            OrderStatusName = "Đang giao hàng"
                        },
                        new
                        {
                            Id = new Guid("4c54c2dd-2fa5-4041-9b94-fb613bebdfbc"),
                            OrderStatusName = "Giao hàng thành công"
                        },
                        new
                        {
                            Id = new Guid("5c54c2dd-2fa5-4041-9b94-fb613bebdfbc"),
                            OrderStatusName = "Giao hàng không thành công"
                        },
                        new
                        {
                            Id = new Guid("6c54c2dd-2fa5-4041-9b94-fb613bebdfbc"),
                            OrderStatusName = "Hủy đơn"
                        },
                        new
                        {
                            Id = new Guid("7c54c2dd-2fa5-4041-9b94-fb613bebdfbc"),
                            OrderStatusName = "Yêu cầu trả hàng"
                        },
                        new
                        {
                            Id = new Guid("8c54c2dd-2fa5-4041-9b94-fb613bebdfbc"),
                            OrderStatusName = "Chấp nhận trả hàng"
                        });
                });

            modelBuilder.Entity("ShoeApp.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Tittle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TittleImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("ShoeApp.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Create_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Update_At")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("ShoeApp.Models.ProductDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Create_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceSale")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SizeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Update_At")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("ProductDetail");
                });

            modelBuilder.Entity("ShoeApp.Models.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProductDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductDetailId");

                    b.ToTable("ProductImage");
                });

            modelBuilder.Entity("ShoeApp.Models.Rank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PoinsMax")
                        .HasColumnType("int");

                    b.Property<int?>("PointsMin")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Rank");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2fa0118d-b530-421f-878e-ce4d54bfc6ab"),
                            Name = "Bạc",
                            PoinsMax = 1000000,
                            PointsMin = 0
                        },
                        new
                        {
                            Id = new Guid("ef72f925-6e9e-409a-8f60-9e3332799585"),
                            Name = "Vàng",
                            PoinsMax = 3000000,
                            PointsMin = 1000001
                        },
                        new
                        {
                            Id = new Guid("a4d2207e-3003-43f0-b1d8-d951039c4edf"),
                            Name = "Kim Cương",
                            PoinsMax = 10000000,
                            PointsMin = 3000001
                        });
                });

            modelBuilder.Entity("ShoeApp.Models.Rate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("Reply")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId");

                    b.ToTable("Rate");
                });

            modelBuilder.Entity("ShoeApp.Models.Size", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SizeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Size");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5c99d4e4-c0f4-4a7c-a1a6-5ce74e0ab808"),
                            SizeName = "Size 1"
                        },
                        new
                        {
                            Id = new Guid("83227dcb-af8f-499e-87a2-5d65bbfe59a7"),
                            SizeName = "Size 2"
                        },
                        new
                        {
                            Id = new Guid("f558bf14-80e3-475e-8b17-a0cc38e47ddb"),
                            SizeName = "Size 3"
                        },
                        new
                        {
                            Id = new Guid("2fb76ef6-e3fc-40d9-85bf-2df26849a8d6"),
                            SizeName = "Size 4"
                        },
                        new
                        {
                            Id = new Guid("c260e042-1927-45c0-92eb-eeffcd8c415f"),
                            SizeName = "Size 5"
                        });
                });

            modelBuilder.Entity("ShoeApp.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("Points")
                        .HasColumnType("int");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("RankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RankId");

                    b.ToTable("Users", "security");

                    b.HasData(
                        new
                        {
                            Id = "2FA6148D-B530-421F-878E-CE4D54BFC6AB",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "46fbb6df-cac5-4aaf-b499-2618a9c965a6",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedUserName = "GUEST",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            RankId = new Guid("2fa0118d-b530-421f-878e-ce4d54bfc6ab"),
                            SecurityStamp = "02dd24f9-ca80-41e2-86fb-1310aa84e9ae",
                            TwoFactorEnabled = false,
                            UserName = "Guest"
                        });
                });

            modelBuilder.Entity("ShoeApp.Models.UserVoucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("VoucherUser");
                });

            modelBuilder.Entity("ShoeApp.Models.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Create_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Discount_Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("End_Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaxDiscountAmount")
                        .HasColumnType("int");

                    b.Property<int?>("Minimum_order_value")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Start_Date")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VoucherCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Voucher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ShoeApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ShoeApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoeApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ShoeApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShoeApp.Models.Adress", b =>
                {
                    b.HasOne("ShoeApp.Models.User", "User")
                        .WithMany("Adresses")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShoeApp.Models.Cart", b =>
                {
                    b.HasOne("ShoeApp.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShoeApp.Models.CartItem", b =>
                {
                    b.HasOne("ShoeApp.Models.Cart", "Cart")
                        .WithMany("CartItem")
                        .HasForeignKey("CartId");

                    b.HasOne("ShoeApp.Models.ProductDetail", "ProductDetail")
                        .WithMany("CartItem")
                        .HasForeignKey("Product_Detail_ID");

                    b.Navigation("Cart");

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("ShoeApp.Models.Order", b =>
                {
                    b.HasOne("ShoeApp.Models.OrderStatus", "OrderStatus")
                        .WithMany("Order")
                        .HasForeignKey("OrderStatusId");

                    b.HasOne("ShoeApp.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.HasOne("ShoeApp.Models.Voucher", "Voucher")
                        .WithMany("Orders")
                        .HasForeignKey("VoucherId");

                    b.Navigation("OrderStatus");

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("ShoeApp.Models.OrderItem", b =>
                {
                    b.HasOne("ShoeApp.Models.Order", "Order")
                        .WithMany("OrderItem")
                        .HasForeignKey("OrderId");

                    b.HasOne("ShoeApp.Models.ProductDetail", "productDetail")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductDetailId");

                    b.Navigation("Order");

                    b.Navigation("productDetail");
                });

            modelBuilder.Entity("ShoeApp.Models.Post", b =>
                {
                    b.HasOne("ShoeApp.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShoeApp.Models.Product", b =>
                {
                    b.HasOne("ShoeApp.Models.Brand", "Brand")
                        .WithMany("Product")
                        .HasForeignKey("BrandId");

                    b.HasOne("ShoeApp.Models.Category", "Category")
                        .WithMany("Product")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ShoeApp.Models.ProductDetail", b =>
                {
                    b.HasOne("ShoeApp.Models.Color", "Colors")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ColorId");

                    b.HasOne("ShoeApp.Models.Product", "Product")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductId");

                    b.HasOne("ShoeApp.Models.Size", "Size")
                        .WithMany("ProductDetails")
                        .HasForeignKey("SizeId");

                    b.Navigation("Colors");

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("ShoeApp.Models.ProductImage", b =>
                {
                    b.HasOne("ShoeApp.Models.ProductDetail", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductDetailId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShoeApp.Models.Rate", b =>
                {
                    b.HasOne("ShoeApp.Models.OrderItem", "OrderItem")
                        .WithMany()
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("ShoeApp.Models.User", b =>
                {
                    b.HasOne("ShoeApp.Models.Rank", "Rank")
                        .WithMany("Users")
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("ShoeApp.Models.UserVoucher", b =>
                {
                    b.HasOne("ShoeApp.Models.User", "User")
                        .WithMany("VoucherUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoeApp.Models.Voucher", "Voucher")
                        .WithMany("UserVouchers")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("ShoeApp.Models.Brand", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShoeApp.Models.Cart", b =>
                {
                    b.Navigation("CartItem");
                });

            modelBuilder.Entity("ShoeApp.Models.Category", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShoeApp.Models.Color", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("ShoeApp.Models.Order", b =>
                {
                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("ShoeApp.Models.OrderStatus", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("ShoeApp.Models.Product", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("ShoeApp.Models.ProductDetail", b =>
                {
                    b.Navigation("CartItem");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("ShoeApp.Models.Rank", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ShoeApp.Models.Size", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("ShoeApp.Models.User", b =>
                {
                    b.Navigation("Adresses");

                    b.Navigation("Orders");

                    b.Navigation("Posts");

                    b.Navigation("VoucherUsers");
                });

            modelBuilder.Entity("ShoeApp.Models.Voucher", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("UserVouchers");
                });
#pragma warning restore 612, 618
        }
    }
}
